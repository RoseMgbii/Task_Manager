The youtube video out now 13th December 2023 is what I'm currently working along with this
Title: Laravel 10 for REST API
Link: https://www.youtube.com/watch?v=9FJeoq5z1_Y&t=7663s


DIFFERENCE BETWEEN A MODEL AND A MODEL RESOURCE
    - A “model” is used to store data, and perhaps performs some business logics against that data.
    - A “resource model” is used to interact with the database (or maybe other types of persistent data) on behalf of the “model”.
        The “resource model” actually performs the CRUD operations



TASK MODEL
    protected $fillable = [
        'title', 'is_done'
    ];
    - fillables are useful to indicate the fields in a model or resource,
    - as well as restrict the fields that can be set using a mass assignment
    - is an array as well


    protected $casts = [
      'is_done' => 'boolean'
    ];

     - use built in $casts variable to typecast the field being shown in the vi
    ];ew
     - make sure the value seen on view is shown as actual boolean not 0 or 1
     - if you don't do this 'is_done' will be viewed as 0 or 1 even though it's a boolean value

    //you can use the $hidden built-in variable to hide certain fields
    protected $hidden = [
        'updated_at',


    - The "booted()" function in the Task Model ensures that, after a User has been authenticated,
        any task created or processed or gotten must possess the user's id as creator id,
        and not assigned the id of the next user.




MIGRATIONS
NB: the command "php artisan migrate:fresh" on cmd line drops all the tables and runs the migrations from the start (removes all data)

      $table->boolean('is_done')->default(false);
  -This creates a field in the model table called 'is_done', and assigns it a default value of false (0)

      $table->boolean('is_done')->nullable()->change();
  -nullable()->change() is used to indicate that a field on the database should have features allowing it to be nullable (can be zero or unassigned)
  Using these Together, like so: $table->boolean('is_done')->default(false)->nullable()->change();
    we can set the default value to false, hence
    the 'is_done' field can be nullable and if it is,
    we assign it the default value false

     $table->foreignId('creator_id')->constrained('users');
  - this creates a field in the database called creator_id which acts as a foreign key to connect the task and users table
  - the "constrained" clause adds some constraints on the users table, like preventing the addition of an already exising user_id to this table, and providing some extra security




ESTABLISHING MODEL RELATIONSHIPS
Indicating that that the Task model belongsTo the User model
        $this->belongsTo(User::class, 'creator_id');

     - We added the name of the foreign key when establishing the relationship because
     - If we didn't do that,
     - laravel eloquent automatically looks for a foreign key starting with the table's name and id (in this case user_id),
     - and automatically assumes and makes that field the foreign key
     - In our case, we created our own foreign key and we want to make that known to laravel's ORM(Eloquent)

  We add the creator_id to the TaskFactory because it is a required field in the task model, and it connects to the User Factory.

  -To reference and fill fields in a model relationship eg, between user and task, in database using tinker:
          create dummy user:
              $u = User::factory()->create()
          reference method used to establish relationship and fill in fields:
              $u -> tasks() -> create(['title' => 'Buy Hamburgers'])




TASK CONTROLLER
/*
return a json response of all the Task objects:
    -return response()->json(Task::all());

return all Task objects as a collection in the format indicated in task resource
    -return new TaskCollection(Task::all());

return a single Task model/resource in the format indicated in the Task Resource class
we will use the laravel model binding to automatically inject the model task into our controller action
Will automatically fetch the particular $task object from the database
        -return new TaskResource($task);

NB: TaskResource(JsonResource) is different from TaskCollection(ResourceCollection)
 although you create both of them using make:resource command.
 Changes are made to the format which the object is shown in the TaskResource

*/




LARAVEL MODEL FACTORY
    - Laravel Model factories define database records in a predictable and easily replicable way
        so that your app tests are consistent and controlled.

    - Model factories define a set of default attributes for each of your Eloquent models.
    - They are used to create fake/dummy records you can use to populate your database.

    - Create the Model Factory and within, indicate the fields you would like to see when creating fake records
    (Other) STEP BY STEP
    - Create the factory for the particular model you want
        ie: php artisan make:factory TaskFactory --model=Task

   - fill in the attributes you'd like your dummy values to have in the returning array within the definition function
        ie: 'name' => fake()->name(),
            'phone_number' => fake()->phoneNumber(),
            'email' => fake()->unique()->safeEmail(),

   - go to the database seeder and in the run fxn, write the code to create the dummy records
        ie: Task::factory(5)->create();   this will create 5 dummy records of task attributes (name, email, etc)

   - on the terminal, run your seeder using this command
        :php artisan db:seed
        To seed/fill the database with the dummy records using the criteria you gave


   TO MAKE SPECIFIC REQUIREMENT
   - If for example, you want the created_at column of the dummy records to create records
       which should show as having been created at a specific date,

   For dates we can use CARBON
   - EG: in the definition fxn within the model factory,
         $created_at = Carbon::parse('2023-05-10')->setTimestamp('UTC');

                return [
                    'name' => fake()->name(),
                    'phone_number' => fake()->phoneNumber(),
                    'email' => fake()->unique()->safeEmail(),
                    'created_at' => $created_at,

                ];

   - we used to carbon to show we want the dummy data to have values that start from 2023 october.
   ('2023-05-10') -> this was a sample to explain how we want it to look like.

   - since the default model migration attribute is '$table->timestamp()', we set the timestamp as utc to address that and use it.




CREATING TASK(s)
*Create and return a task using the request after request has been validated
     public function store(Request $request)
     {
         $validated = $request->validate([
             'title'=>'required|max:255',
             'is_done' => 'sometimes'
         ]);
         $task = Task::create($validated);
         return new TaskResource($task);
    }

OR
*Create and return a task when validating a self-created request:
     public function store(StoreTaskRequest $request)
     {
         $validated = $request->validated();
         $task = Task::create($validated);
         return new TaskResource($task);
    }

       - this function allows the user to create their own tasks and store on the database (POST)
       - the laravel validate and validates resources is used to validate/check whether the values submitted by the user are correct
            according to the validation requirement(rules) provided
       - Then creates a new task from the validated entity, and send a response in the TaskResource format to the user

       - validate() is used to perform validation and validated() is used to get validated data.
       - I believe you can use validate() as default (when using Request $request),
       - however using each should insulate you from potential future changes to the validate() function (if it were, say, changed to return a true/false instead) and result in slightly more readable code.
       - In this case, we use validated() because we are getting the already validated data, which was validated in the StoreTaskRequest

       - the 'sometimes' validation requirement means that we can leave the specified field out of the request and only validate it when it is present.
       - hence: if 'is_done' is not given or indicated in the request body, don't check it
       - else if it is indicated, validate it against the requirements given
       - in our case we made 'is_done' nullable and gave it a default value within the migrations so we might have no need for this

       Additional explanation:
       instead of $task = Task::create($validated), we can do:
       Method One
            $task = new Task();
            $task->title = $validated->title;
            $task->is_done = $validated->is_done;
            $task->save();

       Method Two
            $task = new Task();
            $task->title = $requested->input('title');
            $task->is_done = $requested->input('is_done');
            $task->save();

       Method Three (unsure)
            $task = Task::create($request->all());




GETTING TASK(s)
*Get a specific task:
     public function show(Request $request, Task $task)
     {
         return new TaskResource($task);
     }
         - this function returns a single task resource,
         - to call this,you'll have to
         - indicate the particular task (task id) in the request url (eg 'tasks\1)
         - we use the laravel route model binding to automatically inject task model into the "show" method, retrieve and return it from the database





DELETING TASKS
  $task->delete(); removes the specific task from the database

  Doing: return response()->json(["message"=>"Task successfully deleted Task from database"]);
    - will send a response in json format, showing the given message.

  Whilst this: return response()->noContent();
    - will send/respond the necessary status code (in this case 204)




TASK RESOURCE
  $data = parent::toArray($request);
       converts request body to array

  $data['status'] = $this->is_done ? 'finished':'open';
       returns a 'status' field with the object which stores and displays a text on condition using the content of 'is_done' field
       if is_done is true,status:finished   else,status:open





PAGINATING COLLECTIONS
Eg: when we get all tasks in the database (in the index method)
    it is returned as a collection (with sometimes thousand of records)
    Fetching these can be slow and heavy/tasking for the database.

    To remedy this, we can paginate the collection such that
    Instead of returning all the tasks at once, A number of tasks are returned per each page.
    And links to other pages (including first, last, next, and previous pages) are indicated as well.
    To achieve this, instead of Task::all(), do Task::paginate();




FILTERING TASK COLLECTION
Like querying the list/collection, and fetching records which meet particular conditions
    NB: In our case, we installed the Spatie QueryBuilder fxnality from the terminal using "composer require spatie/laravel-query-builder" and imported it to our TaskController
     $tasks = QueryBuilder::for(Task::class)
                ->allowedFilters('is_done')
                ->paginate();
     - This means, using the QueryBuilder for the task class,
     - make the allowed field used to query/filter the collection be the 'is_done' field
     - then paginate the results of the query




API ROUTES

        Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
            return $request->user();
        });
        - this example route returns the already signed in user.
        - To execute this, you will need to pass the Authorisation Bearer token into the Header

        Route::middleware('auth:sanctum')->group(function () {
              Route::apiResource('tasks', TaskController::class);
                });
        - check PROTECTING TASK ROUTE section below for the above route explanation

        Route::apiResource('tasks', TaskController::class)->only([
            'index', 'show', 'store', 'update'
        ]);
        - This shows that the laravel apiResource should only send requests to the indicated methods
        - Other ways to handle this includes:
        Removing the 'only' method:
          Route::apiResource('tasks', TaskController::class)

        Establishing api routes for each action:
         Route::get('tasks', [TaskController::class, 'index']);
         Route::get('tasks/{id}', [TaskController::class, 'show']);
         Route::post('tasks', [TaskController::class, 'store']);
         Route::put('tasks', [TaskController::class, 'update']);
         Route::delete('tasks', [TaskController::class, 'destroy']);




AUTHENTICATION
For this project, we use Laravel Sanctum.
- If you don't have Sanctum already installed, follow laravel sanctum installation on laravel docs
- Else, Add this \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class to the 'api' array in your Kernel.php file

- Create a new controller for your authentication (calling mine: AuthController)
- Set up a route for that in your API routes file.
    The route for this is normally a post route, since we will be sending(posting) our details to this controller for authentication

- In the AuthController, we establish a method which we use to accept user request and validate the user details
    which will usually be sent in the form of a request

Doing this:

    public function login(Request $request)
    {
        $validated = $request->validate([
            'email' => 'required|email',
            'password' => 'required'
        ]);

        if(!Auth::attempt($validated)){
            return response()->json(['message' => "Login Information Invalid"], 401);
        }

        $user = User::where('email', $validated['email'])->first();

        return response()->json([
            'access_token' => $user->createToken('api_token')->plainTextToken,
            'token_type' => 'Bearer',
        ]);
    }

- We evaluate the user details and if valid, we extract and store it
- Then, we check if the user actually exists in the database and if the credentials are valid before granting access

- The if statement simply states that if the attempt to login fails, relay a message to the user
- Else we check if the user exists by finding the user using the validated email.

-If the user exists we create the user's tokens and return as response in json format
    NB that since the user we are using here is a dummy user created with the UserFactory,
    the default password for them when requesting access is "password" (check the UserFactory)




PROTECTING THE TASK ROUTE
- Although we validated and authenticated the task and the user,
- the task route where requests pass through is still unprotected
- In order to protect a route, we need to add a route middleware group

- We can use 'auth:sanctum' for that, which is the authentication middleware from laravel
- We create a middleware using auth:sanctum, make it into a group,
    and nest all the routes you want accessed only after authentication is proven valid within it
    Like so:
    Route::middleware('auth:sanctum')->group(function () {
        Route::apiResource('tasks', TaskController::class);
        });

- And so, when we try to get/post/delete a task and the user or request client has not been verified,
- It will return "message":"Unauthenticated", indicating that the user trying to send requests to that route is unauthenticated
    because we are now protecting our route using sanctum

-It will only work (get/post/delete) when we enter the Bearer token as value in the authorisation key within our Header





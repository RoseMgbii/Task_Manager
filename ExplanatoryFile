TASK CONTROLLER
/*
return a json response of all the Task objects:
    -return response()->json(Task::all());

return all Task objects as a collection in the format indicated in task resource
    -return new TaskCollection(Task::all());

return a single Task model/resource using the Task Resource class
    Within the apiResource route, for the "show" method we will pass the task id to it,
    we will use the laravel model binding to automatically inject the model task into our controller action
    Will automatically fetch the particular $task object from the database
        -return new TaskResource($task);

NB: TaskResource(JsonResource) is different from TaskCollection(ResourceCollection)
 although you create both of them using make:resource command.
 Changes are made to the format which the object is shown in the TaskResource

*/




LARAVEL MODEL FACTORY
    - Laravel Model factories define database records in a predictable and easily replicable way
        so that your app tests are consistent and controlled.
    - Model factories define a set of default attributes for each of your Eloquent models.
    - They are used to create fake/dummy records you can use to populate your database.

    - Create the Model Factory and within, indicate the fields you values in when creating fake records
    - Go to database (recommended "php artisan tinker")
    - and using the factory method, indicate the number of records you want and then create (Task::factory(50)->create())



GETTING TASK(s)
/*
*Get a specific task:
     public function show(Request $request, Task $task)
     {
         return new TaskResource($task);
     }
         - this function returns a single task resource,
         - to call this,you'll have to
         - indicate the particular task (task id) in the request url (eg 'tasks\1)
         - we use the laravel route model binding to automatically inject task model into the "show" method, retrieve and return it from the database

     public function store(Request $request)
     {
         $validated = $request->validate([
             'title'=>'required|max:255',
             'is_done' => 'sometimes'
         ]);
         $task = Task::create($validated);
         return new TaskResource($task);
    }

  OR(when validating in the request):
     public function store(StoreTaskRequest $request)
     {
         $validated = $request->validate();
         $task = Task::create($validated);
         return new TaskResource($task);
    }

       - this function allows the user to create their own tasks from and store on the database (POST)
       - the laravel validate and validates resources is used to validate/check whether the values submitted by the user are correct
       - according to the validation requirement(rules) provided
       - create a new task from the validated entity, and send a response in the TaskResource format to the user

       - validate() can be used to perform validation and validated() to get validated data.
       - I believe you can use validate() for both,
       - however using each should insulate you from potential future changes to the validate() function (if it were, say, changed to return a true/false instead) and result in slightly more readable code.
       - In the case we use validated(), it is because we are validating the data in the request (e.g: StoreTaskRequest)

       - the 'sometimes' validation means that we can leave the specified field out of the request and only validate it when it is present.
       - hence: if 'is_done' is not given or indicated in the request body, don't check it
       - else validate it against the requirements given
       - in our case we made 'is_done' nullable and gave it a default value so we might have no need for this

       Additional explanation:
       instead of $task = Task::create($validated), we can do:
       Method One
            $task = new Task();
            $task->title = $validated->title;
            $task->is_done = $validated->is_done;
            $task->save();

       Method Two
            $task = new Task();
            $task->title = $requested->input('title');
            $task->is_done = $requested->input('is_done');
            $task->save();

       Method Three (unsure)
            $task = Task::create($request->all());

*/



PAGINATING COLLECTIONS
Eg: when we get all tasks in the database (in the index method)
    it is returned as a collection (with sometimes thousand of records)
    Fetching these can get be slow and heavy on the database
    To remedy this, we can paginate the collection such that
    Instead of returning all the tasks at once, A number of tasks are returned per each page.
    And links to other pages are indicated below as well.
    To achieve this, instead of Task::all(), do Task::paginate();




FILTERING TASK COLLECTION
Like querying the list/collection, and fetching records which meet particular conditions




TASK MODEL
/*
    protected $fillable = [
        'title', 'is_done'
    ];
    - fillables are useful to indicate the fields in a model or resource,
    - as well as restrict the fields that can be set using a mass assignment
    - is an array as well


    protected $casts = [
      'is_done' => 'boolean'
    ];

     - use built in $casts variable to typecast the field being shown in the view
     - make sure the value seen on view is shown as actual boolean not 0 or 1
     - if you don't do this 'is_done' will be viewed as 0 or 1 even though it's a boolean value

    //you can use the $hidden built-in variable to hide certain fields
    protected $hidden = [
        'updated_at',
    ];

*/




DELETING TASKS
/*
  $task->delete(); simply removes the specific task from the database

  Doing: return response()->json(["message"=>"Task successfully deleted Task from database"]);
    - will send a response in json format, showing the given message.

  Whilst this: return response()->noContent();
    - will send/respond the necessary status code (in this case 204)
*/




MIGRATIONS
/*
      $table->boolean('is_done')->default(false);
  -This creates a field in the model table called 'is_done', and assigns it a default value of 0

      $table->boolean('is_done')->nullable()->change();
  -nullable()->change(0) is used to indicate that a field on the database should be nullable (can be zero or unassigned)

  Together, we can set the default value to false, hence
    the 'is_done' field can be nullable and if it is,
    we assign it the default value false.
*/




TASK RESOURCE
/*
  $data = parent::toArray($request);
       converts request body to array

  $data['status'] = $this->is_done ? 'finished':'open';
       returns a 'status' field as well as 'is_done' field
       which stores and displays a text on condition using the content of 'is_done' field
       if is_done is true,status:finished   else,status:open
 */




API ROUTES
/*
        Route::apiResource('tasks', TaskController::class)->only([
            'index', 'show', 'store', 'update'
        ]);
        - This shows that the laravel apiResource should only send requests to the indicated methods
        - Other ways to handle this includes:
        Removing the 'only' method:
          Route::apiResource('tasks', TaskController::class)

        Establishing api routes for each action:
         Route::get('tasks', [TaskController::class, 'index']);
         Route::get('tasks/{id}', [TaskController::class, 'show']);
         Route::post('tasks', [TaskController::class, 'store']);
         Route::put('tasks', [TaskController::class, 'update']);
         Route::delete('tasks', [TaskController::class, 'destroy']);
*/



